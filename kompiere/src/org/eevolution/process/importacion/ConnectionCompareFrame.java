/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ImportarPrintFormat.java
 *
 * Created on 05/10/2009, 10:22:47
 */

package org.eevolution.process.importacion;

import java.awt.BorderLayout;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.sql.Connection;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.compiere.apps.form.FormFrame;
import org.compiere.apps.form.FormPanel;
import org.compiere.db.CConnection;
import org.compiere.swing.CPanel;
import org.compiere.util.DB;
import org.compiere.util.Env;
import org.compiere.util.Trx;

/**
 *
 * @author daniel
 */
public class ConnectionCompareFrame extends CPanel implements FormPanel{

    //ConexiÃ³n donde se van a insertar los datos (Destino)
    private Connection conexionInicial;

    //Coenxion de la BD desde donde se van a obtener los datos (Origen)
    private Connection conexionFuente;

    //Tabla desde la cual se va a importar datos
    private String tableName;
    
    //Orden para importar datos
    private String orderName;

    //Columna por la cual se verifica existencia en BD destino
    private String columnName;
    
    private String nombreVentana;
    
    //Titulo del boton
    private String tituloBoton;

    private String datoImportar;

    /** Creates new form ImportarPrintFormat */
    public ConnectionCompareFrame() {
        initComponents();
        lBarra.setForeground(this.getBackground());
        try {
            Thread.currentThread().sleep(2);
        } catch (InterruptedException ex) {
            Logger.getLogger(ConnectionCompareFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        String bd = DB.getDatabase().getSchema();
        conexionInicial = DB.getConnectionRW();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    //@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tHost = new javax.swing.JTextField();
        tPort = new javax.swing.JTextField();
        tBd = new javax.swing.JTextField();
        tUsuario = new javax.swing.JTextField();
        bTestConexion = new javax.swing.JButton();
        
        //lPrintFormat = new javax.swing.JLabel();
        //cbPrintFormat = new javax.swing.JComboBox();
        
        bImportar = new javax.swing.JButton();
        tPassword = new javax.swing.JPasswordField();
        pbBarra = new javax.swing.JProgressBar();
        lBarra = new javax.swing.JLabel();

        tPort.setMaximumSize(new java.awt.Dimension(163, 20));
        tPort.setMinimumSize(new java.awt.Dimension(163, 20));
        tPort.setPreferredSize(new java.awt.Dimension(163, 20));
        tBd.setPreferredSize(new java.awt.Dimension(163, 20));
        tUsuario.setPreferredSize(new java.awt.Dimension(163, 20));
        tPassword.setPreferredSize(new java.awt.Dimension(163, 20));
        tHost.setPreferredSize(new java.awt.Dimension(163, 20));
        //cbPrintFormat.setPreferredSize(new java.awt.Dimension(200, 20));
        pbBarra.setPreferredSize(new java.awt.Dimension(163, 20));
        //pbBarra.setVisible(false);
        /*setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Importacion de Print Formats");
        setResizable(false);*/

        jLabel1.setText("Host");

        jLabel2.setText("Puerto");

        jLabel3.setText("Base de Datos");

        jLabel4.setText("Usuario");

        jLabel5.setText("Contraseña");

        tHost.setText("200.80.148.179");

        tPort.setText("1521");
        tPort.setDragEnabled(true);

        tBd.setText("panalab");

        tUsuario.setText("compiere");

        bTestConexion.setText("Test Conexion");
        bTestConexion.setIconTextGap(0);
        bTestConexion.setMaximumSize(new java.awt.Dimension(200, 25));
        bTestConexion.setMinimumSize(new java.awt.Dimension(200, 25));
        bTestConexion.setPreferredSize(new java.awt.Dimension(200, 25));
        bTestConexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bTestConexionActionPerformed(evt);
            }
        });

        bImportar.setText("Comparar");
        bImportar.setEnabled(false);
        bImportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCompararActionPerformed(evt);
            }
        });

        tPassword.setText("panalab");
        pbBarra.setStringPainted(true);

        lBarra.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lBarra.setText("Seleccionando...");

        mainPanel = new JPanel();
        mainPanel.setLayout(new java.awt.GridBagLayout());

        pbPanel = new JPanel();
        pbPanel.setLayout(new java.awt.BorderLayout());

        add(mainPanel, java.awt.BorderLayout.CENTER);
        mainPanel.add(jLabel1,    new GridBagConstraints(0, 1, 1, 1, 0.0, 0.0
                ,GridBagConstraints.EAST, GridBagConstraints.NONE, new Insets(5, 5, 5, 5), 0, 0));
        mainPanel.add(tHost,    new GridBagConstraints(1, 1, 1, 1, 0.0, 0.0
                ,GridBagConstraints.EAST, GridBagConstraints.NONE, new Insets(5, 5, 5, 5), 0, 0));
        mainPanel.add(jLabel2,    new GridBagConstraints(0, 2, 1, 1, 0.0, 0.0
                ,GridBagConstraints.EAST, GridBagConstraints.NONE, new Insets(5, 5, 5, 5), 0, 0));
        mainPanel.add(tPort,    new GridBagConstraints(1, 2, 1, 1, 0.0, 0.0
                ,GridBagConstraints.EAST, GridBagConstraints.NONE, new Insets(5, 5, 5, 5), 0, 0));
        mainPanel.add(jLabel3,    new GridBagConstraints(0, 3, 1, 1, 0.0, 0.0
                ,GridBagConstraints.EAST, GridBagConstraints.NONE, new Insets(5, 5, 5, 5), 0, 0));
        mainPanel.add(tBd,    new GridBagConstraints(1, 3, 1, 1, 0.0, 0.0
                ,GridBagConstraints.EAST, GridBagConstraints.NONE, new Insets(5, 5, 5, 5), 0, 0));
        mainPanel.add(jLabel4,    new GridBagConstraints(0, 4, 1, 1, 0.0, 0.0
                ,GridBagConstraints.EAST, GridBagConstraints.NONE, new Insets(5, 5, 5, 5), 0, 0));
        mainPanel.add(tUsuario,    new GridBagConstraints(1, 4, 1, 1, 0.0, 0.0
                ,GridBagConstraints.EAST, GridBagConstraints.NONE, new Insets(5, 5, 5, 5), 0, 0));
        mainPanel.add(jLabel5,    new GridBagConstraints(0, 5, 1, 1, 0.0, 0.0
                ,GridBagConstraints.EAST, GridBagConstraints.NONE, new Insets(5, 5, 5, 5), 0, 0));
        mainPanel.add(tPassword,    new GridBagConstraints(1, 5, 1, 1, 0.0, 0.0
                ,GridBagConstraints.EAST, GridBagConstraints.NONE, new Insets(5, 5, 5, 5), 0, 0));
        mainPanel.add(bTestConexion,    new GridBagConstraints(1, 6, 1, 1, 0.0, 0.0
                ,GridBagConstraints.EAST, GridBagConstraints.NONE, new Insets(5, 5, 5, 5), 0, 0));
        //mainPanel.add(lPrintFormat,    new GridBagConstraints(0, 7, 1, 1, 0.0, 0.0
        //        ,GridBagConstraints.EAST, GridBagConstraints.NONE, new Insets(5, 5, 5, 5), 0, 0));
        //mainPanel.add(cbPrintFormat,    new GridBagConstraints(1, 7, 1, 1, 0.0, 0.0
        //        ,GridBagConstraints.EAST, GridBagConstraints.NONE, new Insets(5, 5, 5, 5), 0, 0));
        mainPanel.add(bImportar,    new GridBagConstraints(1, 8, 1, 1, 0.0, 0.0
                ,GridBagConstraints.EAST, GridBagConstraints.NONE, new Insets(5, 5, 5, 5), 0, 0));
        pbPanel.add(lBarra);
        pbPanel.add(pbBarra,"South");

    }// </editor-fold>//GEN-END:initComponents

    private void bTestConexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bTestConexionActionPerformed
        // TODO add your handling code here:
        pbBarra.setVisible(true);
        jLabel5.setEnabled(false);
        try {
        	Thread.currentThread().sleep(2);
        } catch (InterruptedException ex) {
        	Logger.getLogger(ConnectionCompareFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //Compruebo que todos los campos tengan datos
        if (tBd.getText().equals("")||tHost.getText().equals("")||tPassword.getText().equals("")||tPort.getText().equals("")||tUsuario.getText().equals(""))
            JOptionPane.showConfirmDialog(null, "Algunos campos no tienen valores", "Error Parametros", JOptionPane.INFORMATION_MESSAGE);
        else{
            //Obtengo la conexion desde donde voy a extraer las OC.
            try{
                Integer port = new Integer(tPort.getText());
                CConnection c=CConnection.get("Oracle", tHost.getText(), port, tBd.getText(), tUsuario.getText(), tPassword.getText());
                conexionFuente = c.getConnection(true, Connection.TRANSACTION_READ_COMMITTED);
                //lPrintFormat.setEnabled(true);
                //cbPrintFormat.setEnabled(true);
                bImportar.setEnabled(true);
                tBd.setEnabled(false);
                tHost.setEnabled(false);
                tPassword.setEnabled(false);
                tPort.setEnabled(false);
                tUsuario.setEnabled(false);
                bTestConexion.setEnabled(false);
                jLabel1.setEnabled(false);
                jLabel2.setEnabled(false);
                jLabel3.setEnabled(false);
                jLabel4.setEnabled(false);
                //CConnection c2 = CConnection.get("Oracle", tHost.getText(), 1521, DB.getDatabase().getName(), DB.getDatabase().get, tPassword.getText());
                //conexionInicial = c2.getConnection(true, Connection.TRANSACTION_READ_COMMITTED);
                //actualizarBarra();
            }
            catch(NumberFormatException ex){
                JOptionPane.showConfirmDialog(null, "El puerto ingresado no es valido", "Puerto invalido", JOptionPane.ERROR_MESSAGE);
            }
            catch(Exception e){
            }
        }
}

    private void bCompararActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bImportarActionPerformed
        CompareProcess proceso = null;
        
        Trx trx = Trx.get("Compiere", true);
        
        if (nombreVentana.equals("Comparar Table and Column")){
        	proceso = new ComparacionTableColumn(conexionInicial,conexionFuente);	
        }
        else
        	if (nombreVentana.equals("Comparar Reference")){
            	proceso = new ComparacionReference(conexionInicial,conexionFuente);	
            }
        	else
		        if (nombreVentana.equals("CompareValueRule")){
		        	proceso = new ComparacionValueRule(conexionInicial,conexionFuente);	
		        }
            
        proceso.setTrxName(trx.getTrxName());
        String rta = proceso.procesar();
        pbBarra.setValue(0);
        try {
            Thread.sleep(2);
        } catch (InterruptedException ex) {
            Logger.getLogger(ConnectionCompareFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (rta.equals("OK")){
            JOptionPane.showMessageDialog(this, "La comparación se ha realizado con Éxito", "Importacion exitosa", JOptionPane.INFORMATION_MESSAGE);
            trx.commit();
        }
        else{
            JOptionPane.showMessageDialog(this, rta, "Error en la comparación", JOptionPane.ERROR_MESSAGE);
            trx.rollback();
        }
        trx.close();
    }//GEN-LAST:event_bImportarActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConnectionCompareFrame().setVisible(true);
            }
        });
    }

    public void dispose() {
    }

    public class ThreadLabelBarra extends Thread{
        private boolean isActive = true;

        public ThreadLabelBarra(){
            lBarra.setVisible(true);
            lBarra.paintImmediately(lBarra.getVisibleRect());
        }

        public void run(){
            while (isActive){
                lBarra.setVisible(!lBarra.isVisible());
                lBarra.paintImmediately(lBarra.getVisibleRect());
                try {
                    Thread.sleep(800);
                } catch (InterruptedException ex) {
                    Logger.getLogger(ConnectionCompareFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        public void beforeStop(){
            lBarra.setVisible(true);
            lBarra.paintImmediately(lBarra.getVisibleRect());
        }
        public void setIsActive(boolean active){
            isActive = active;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bImportar;
    private javax.swing.JButton bTestConexion;
    //private javax.swing.JComboBox cbPrintFormat;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel lBarra;
    //private javax.swing.JLabel lPrintFormat;
    private javax.swing.JProgressBar pbBarra;
    private javax.swing.JTextField tBd;
    private javax.swing.JTextField tHost;
    private javax.swing.JPasswordField tPassword;
    private javax.swing.JTextField tPort;
    private javax.swing.JTextField tUsuario;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel pbPanel;
    // End of variables declaration//GEN-END:variables

    //private String nombreVentana;

    public void init(int WindowNo, FormFrame frame) {
        nombreVentana = Env.getContext(Env.getCtx(), WindowNo, "WindowName");
        tableName = "ad_table";
        columnName = "tableName";
        tituloBoton = "Test Conexion";
        bTestConexion.setText(tituloBoton);
        frame.getContentPane().add(mainPanel, BorderLayout.CENTER);
        frame.getContentPane().add(pbPanel, BorderLayout.SOUTH);
    }

}